Desarrollo basado en plataformas
Laboratorio: Ejecución de pipeline en Jenkins para despliegue de infraestructura en Azure
Descripción
En este laboratorio, ejecutarás un pipeline en Jenkins para el despliegue automatizado de infraestructura en Microsoft Azure. Usarás Terraform para definir tu infraestructura como código (IaC) y configurarás un pipeline que gestione la implementación y actualización de dicha infraestructura de forma eficiente a través de Azure CLI y Azure Service Principal.
Laboratorio de Jenkins 01 - Instalación
Duración: 10 minutos.
Instalacion de Jenkins en Docker
Este laboratorio te guiará a través de los pasos para configurar y ejecutar Jenkins utilizando Docker Desktop, con lo cual contaras con Jenkins de manera local con data persistente, esto te permitira explorar las opciones basicas como instalaciones de plugins, organizar y realizar configuraciones de jobs, explorar opciones seguridad, etc.
Requisitos Previos:
Docker: Tener instalado Docker Desktop.
Docker Hub: Tener una cuenta de Docker Hub.
Diagrama de funcionamiento de jenkins localmente:
Paso 1: Descargar imagen de Jenkins del repositorio de Docker Hub
Ejecuta en la terminal de tu host el siguiente comando:
docker pull jenkins/jenkins
Ahora cuentas con la imagen ultima imagen oficial de Jenkins!
Paso 2: Crear volume para persistencia de datos de Jenkins
Ejecuta en la terminal de tu host el siguiente comando:
docker volume create jenkinsvl
Creaste un volume que es un espacio aislado para almacenar los datos importantes de Jenkins, como configuraciones, jobs, secretos encriptados, etc.
Paso 3: Ejecutar la imagen de Jenkins
Ejecuta en la terminal de tu host el siguiente comando:
docker run -d --name jenkinslocal -p 8080:8080 -p 50000:50000 --mount type=volume,src=jenkinsvl,dst=/var/jenkins_home jenkins/jenkins
Estas ejecutando un contenedor con el nombre "jenkinslocal" en los puertos 8080 y 5000, los cuales son los puertos por defecto de Jenkins. Ademas, estas usando el volume que creamos "jenkinsvl" para que la data de la ruta "/var/jenkins_home" sea peristente pese a que el contenedor se detenga o sea eliminado. Por ultimo, estas usando la imagen oficial de Jenkins "jenkins/jenkins".
Paso 4: Acceder a Jenkins
Valida que el contenedor se encuentre "RUNNING" y para ingresare a la interfaz grafica de jenkins realizamos:
Abre un navegador web y accede a http://localhost:8080
En el navegador web ahora te solicitará la contraseña inicial de Jenkins que solo sera utilizada para esta parte de incializacion en la configuracion, para ello debes ejeuctar el siguiente comando:
docker exec jenkinslocal cat /var/jenkins_home/secrets/initialAdminPassword
Copia la clave e ingresala en la pagina de Jenkins.
Paso 5: Instalación de plugins
Una vez que hayas completado la configuración inicial con la contraseña, instala los plugins sugeridos y espera que se complete la descarga para continuar.
Paso 6: Creación de usuario administrador
Completa la configuracion con la creación de un usuario administrador para gestionar Jenkins, completando todos los campos solicitados, luego de hecho guarda la configuracion y confirma la direccion de administración.
Ahora puedes empezar a explorar Jenkins desde tu computadora local!
Instalacion y ejecucion de job con plugins
Un plugin en Jenkins es una extensión que agrega funcionalidad adicional al servidor de automatización Jenkins. Estas pequeñas aplicaciones pueden ser instaladas en Jenkins para agregar características como integraciones con herramientas externas, nuevos tipos de proyectos, notificaciones, y más.
Este laboratorio te guiará a través de los pasos para instalar el plugin de Chuck Norris en Jenkins y ejecutarlo para darle un paso final divertido a nuestros Jobs.
Paso 1: Iniciar Jenkins
Si aún no has iniciado Jenkins, asegúrate de ejecutar el contenedor de Docker para Jenkins, si eliminaste el contenedor deberas volver a ejecutar el comando:
docker run -d --name jenkinslocal -p 8080:8080 -p 50000:50000 --mount type=volume,src=jenkinsvl,dst=/var/jenkins_home jenkins/jenkins
Paso 2: Acceder al panel de administración de Jenkins
Abre un navegador web y accede a http://localhost:8080 (o la dirección de tu máquina Docker si es diferente).
Inicia sesión con tus credenciales de administrador.
Paso 3: Instalar el plugin de Chuck Norris
En el panel de administración, ve a "Manage Jenkins" (Administrar Jenkins) y selecciona "Manage Plugins" (Administrar Plugins).
Ve a la pestaña "Available" (Disponibles) y busca "Chuck Norris".
Selecciona el plugin de Chuck Norris y haz clic en "Install" (Instalar).
Ve a la pestaña "Installed" (Instalados) para ver una lista de todos los plugins instalados en Jenkins. Busca el plugin de Chuck Norris en la lista. Si aparece en la lista, significa que se instaló correctamente.
Paso 4: Configurar y ejecutar el job
Crea un nuevo job (Nueva Tarea) de tipo freestyle (Crear un proyecto de estilo libre) e ingresa un nombre random de tu eleccion.
Inmediatamente podras visualizar la pagina de configuración del job, ve a la sección "Build" (Construcción).
Añade un nuevo paso de construcción para ejecutar despues y elige "Active Chuck Norris" (Ejecutar patada circular de Chuck Norris).
Guarda la configuración del job.
Paso 5: Ejecutar el job
Ejecuta el job manualmente o espera a que se ejecute según la configuración programada.
Observa la salida del job para ver el mensaje de Chuck Norris.
Paso 6: Disfruta del resultado
¡Felicidades! Has instalado el plugin de Chuck Norris en Jenkins y ejecutado con éxito el job. Ahora puedes disfrutar de los mensajes inspiradores de Chuck Norris en tus construcciones de Jenkins.
De acuerdo a las necesidades de las automatizaciones o flujos de trabajos que estemos por construir suele crearse plugins oficiales de diferentes soluciones o por colaboradores que aportan a la comunidad de Jenkins para agilizar procesos. Aqui tienes una lista de plugins para DevOps:  en la cual puedes ver su finalidad y uso.
Laboratorio: Ejecución de pipeline en Jenkins para despliegue de infraestructura en Azur
Paso 1: Configurar DOCKERFILE completo con Git, jq, az CLI y Terraform incluidos para tus pipelines con Terraform en Azure.
Ideal para ejecutar pipelines como el tuyo que usan GitHub, Azure y Terraform.
Descripción
En este laboratorio, ejecutarás un pipeline en Jenkins para el despliegue automatizado de infraestructura en Microsoft Azure. Usarás Terraform para definir tu infraestructura como código (IaC) y configurarás un pipeline que gestione la implementación y actualización de dicha infraestructura de forma eficiente a través de Azure CLI y Azure Service Principal.
Requisitos Previos
Cuenta de Azure con permisos para crear recursos.
Azure CLI instalado en la máquina de Jenkins.
Jenkins instalado con los siguientes plugins:
Azure CLI Plugin
Pipeline Plugin
Terraform Plugin
Pipeline Stage View Plugin
Pipeline Utility Steps Plugin
Paso 2: Dockerfile completo para tu Jenkins que incluye:
git
jq
azure-cli
terraform
Ideal para ejecutar pipelines como el tuyo que usan GitHub, Azure y Terraform
FROM jenkins/jenkins:lts
USER root
# Instala dependencias básicas, Git, jq y certificados
RUN apt-get update && \
    apt-get install -y git jq curl apt-transport-https ca-certificates gnupg lsb-release software-properties-common unzip software-properties-common gnupg2
# Instala Azure CLI
RUN curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && \
    install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/ && \
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" > /etc/apt/sources.list.d/azure-cli.list && \
    apt-get update && \
    apt-get install -y azure-cli && \
    rm -f microsoft.gpg
# Instala Terraform
ENV TERRAFORM_VERSION=1.8.4
RUN curl -fsSL https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -o terraform.zip && \
    unzip terraform.zip && \
    mv terraform /usr/local/bin/ && \
    rm terraform.zip
# Verificaciones opcionales (puedes quitarlas si no deseas salidas de versión)
RUN git --version && jq --version && az version && terraform -version
USER jenkins
Guarda el Dockerfile
Guarda el contenido en un archivo llamado exactamente:
Dockerfile
en un directorio vacío, por ejemplo:
mkdir jenkins-azure-terraform
cd jenkins-azure-terraform
# guarda el Dockerfile dentro
Construye la imagen Docker
docker build -t jenkins-azure-terraform .
Ejecuta el contenedor con esa imagen
docker run -d \
  --name jenkins \
  -p 8080:8080 -p 50000:50000 \
  -v jenkins_home:/var/jenkins_home \
  jenkins-azure-terraform
Ve a tu navegador y abre:
http://localhost:8080
Para el primer uso, Jenkins te pedirá el unlock admin password, que puedes obtener con:
docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword
Paso 2: Crear un Azure Service Principal
Este servicio se usará para autenticarse desde Jenkins.
Cómo crear un Service Principal en Azure paso a paso
Abre una terminal con Azure CLI (puedes usar Azure Cloud Shell o tu propia máquina con Azure CLI instalado).
Ejecuta el siguiente comando (sustituye <NOMBRE-SP> con un nombre representativo, por ejemplo jenkins-sp):
az ad sp create-for-rbac --name <NOMBRE-SP> --role Contributor   --scopes /subscriptions/<ID-DE-TU-SUSCRIPCION> --sdk-auth
Ejemplo:
az ad sp create-for-rbac --name jenkins-sp --role Contributor \
  --scopes /subscriptions/12345678-aaaa-bbbb-cccc-1234567890ab --sdk-auth
COMO VER MI USUARIO AZURE CLI 
  Abre tu terminal (puede ser local o Azure Cloud Shell).   
  Inicia sesión en tu cuenta de Azure si no lo has hecho:
az login
Una vez autenticado, ejecuta:
az account list --output table
Esto mostrará una tabla como:
az ad sp create-for-rbac --name <NOMBRE-SP> --role Contributor   --scopes /subscriptions/<ID-DE-TU-SUSCRIPCION> --sdk-auth
Copia la salida JSON y guárdala como secreto de Jenkins con ID azure-service-principal.
¿Cómo hacerlo?
Ve a: Jenkins > Manage Jenkins > Credentials > (tu almacén, como “Global”) > Add Credentials.
Configura así:
Kind: Secret text
Secret: (pega aquí todo el JSON generado con az ad sp create-for-rbac --sdk-auth)
ID: azure-service-principal
Description: Credencial para autenticación con Azure desde Jenkins
Paso 3: Configurar el pipeline en Jenkins
Pipeline para Despliegue de Infraestructura en Azure
Objetivo
Crear un Jenkinsfile que defina un pipeline declarativo para:
Obtener el código desde un repositorio.
Inicializar Terraform.
Generar el plan de infraestructura.
Aplicar el plan, desplegando la infraestructura en Azure.
Requisitos previos en Jenkins
Jenkins instalado y en ejecución.
Terraform instalado en el entorno de Jenkins (puede instalarse globalmente o en la imagen Docker).
Azure CLI instalado y configurado en el agente Jenkins.
Jenkins con los siguientes plugins instalados:
Pipeline
Credentials Binding Plugin
Terraform Plugin (opcional)
Azure CLI Plugin (opcional si usas directamente az login vía terminal)
Paso 1: Estructura de archivos del proyecto Terraform  Estructura esperada del repositorio Git
Tu repositorio debe tener al menos los siguientes archivos:
Paso 2: Jenkinsfile
Este Jenkinsfile se encarga de:
Clonar el repositorio.
Loguearse a Azure.
Ejecutar Terraform init, plan y apply.
pipeline {
    agent any
    environment {
        TF_IN_AUTOMATION = "true"
    }
    stages {
        stage('Clonar Repositorio') {
            steps {
                git branch: 'main', url: 'https://github.com/jaimepsayago/azure-appservice-tf'            }
        }
        stage('Autenticación Azure') {
            steps {
                withCredentials([string(credentialsId: 'azure-service-principal', variable: 'AZURE_CREDENTIALS_JSON')]) {
                    sh '''
                        echo "$AZURE_CREDENTIALS_JSON" > azure-credentials.json
                        export ARM_CLIENT_ID=$(jq -r .clientId azure-credentials.json)
                        export ARM_CLIENT_SECRET=$(jq -r .clientSecret azure-credentials.json)
                        export ARM_TENANT_ID=$(jq -r .tenantId azure-credentials.json)
                        export ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId azure-credentials.json)
                        echo "client_id       = \\"$ARM_CLIENT_ID\\"" > terraform.tfvars
                        echo "client_secret   = \\"$ARM_CLIENT_SECRET\\"" >> terraform.tfvars
                        echo "tenant_id       = \\"$ARM_TENANT_ID\\"" >> terraform.tfvars
                        echo "subscription_id = \\"$ARM_SUBSCRIPTION_ID\\"" >> terraform.tfvars
                        az login --service-principal \
                          --username $ARM_CLIENT_ID \
                          --password $ARM_CLIENT_SECRET \
                          --tenant $ARM_TENANT_ID
                        az account set --subscription $ARM_SUBSCRIPTION_ID
                    '''
                }
            }
        }
        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }
        stage('Terraform Plan') {
            steps {
                sh 'terraform plan -out=tfplan'
            }
        }
        stage('Aprobación') {
            steps {
                input message: '¿Deseas aplicar los cambios en Azure?'
            }
        }
        stage('Terraform Apply') {
            steps {
                sh 'terraform apply -auto-approve tfplan'
            }
        }
    }
}
¿Qué hace cada etapa?
Paso 3: Ejecutar en Jenkins
Crea un nuevo Pipeline Job en Jenkins.
Configura Git en tools
Crear credeciales de git en Jenkins
Configura el SCM (repositorio Git) donde tienes el proyecto.
Asegúrate de tener Terraform, Azure CLI y jq instalados en Jenkins.
Ejecuta el pipeline y aprueba manualmente el apply.
Resultado esperado
Al finalizar el pipeline, tendrás:
Un grupo de recursos en Azure llamado rg-tf-appservice.
Un App Service Plan gratuito.
Una Web App con una URL pública tipo:
Tarea
Primera parte:
Construir un Jenkins Pipeline para construir y ejecutar un contenedor Docker con una aplicación Quarkus
Segunda parte:
Despliegue del proyecto Quarkus en Azure App Service (con Docker)